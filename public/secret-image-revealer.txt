https://github.com/secretimage/secretimage.github.io/blob/main/src/SecretImageRevealer.tsx

```tsx
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css'; // Import the CSS file for styling

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  '/IMG_7778.png',
  '/IMG_7794.png',
  '/IMG_7795.png',
  '/IMG_7796.png',
  '/IMG_7797.png',
  '/IMG_7798.png',
  '/IMG_8060.png',
  '/IMG_8061.png',
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState<string>('');
  const [isSecretRevealed, setIsSecretRevealed] = useState<boolean>(false);
  const [selectedImage, setSelectedImage] = useState<string>('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    const formattedTime = getCurrentTimeString();
    saveData(`attemptedPassword${formattedTime}`, input);
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      // Pick a random image from the array
      const randomIndex = Math.floor(Math.random() * images.length);
      setSelectedImage(images[randomIndex]);
    } else {
      setIsSecretRevealed(false);
    }
  };

  // Select a random image only once when the component is mounted
  useEffect(selectNewImage, []); // The empty array ensures this effect runs only once

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.text();
      })
      .catch(error => {
        console.error('Error saving data:', error);
      });
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');

    return `${year}-${month}-${day}-${hours}-${minutes}-${seconds}`;
  };


  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
     {isSecretRevealed && (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      )}

      {!isSecretRevealed && (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
```

// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame';

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    return new Date().toISOString().replace(/T/, '-').replace(/:/g, '-').split('.')[0];
  };

  return (
    <div className="container">
      {/* ... */}
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {/* ... */}
    </div>
  );
};

export default SecretImageRevealer;

// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:\d+\.\d+Z$/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;

// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ key, data }),
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, ' ').replace(/\..+/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={event => event.key === 'Enter' && checkSecret()}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;

// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual secret

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
    }).catch(error => console.error('Error saving data:', error));
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:\d+\.\d+Z$/, '').replace(/:/g, '-');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, ' ').replace(/\..+/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <div className="image-container">
          <a href={selectedImage} target="_blank" rel="noopener noreferrer">
            <img src={selectedImage} className="logo" alt="Secret Image" />
          </a>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </div>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual secret

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = (key: string, data: string) => {
    // ... saveData implementation
  };

  const getCurrentTimeString = () => {
    // ... getCurrentTimeString implementation
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        Enter the secret phrase:
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <div className="image-container">
          <a href={selectedImage} target="_blank" rel="noopener noreferrer">
            <img src={selectedImage} className="logo" alt="Secret Image" />
          </a>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </div>
      ) : (
        <p className="image-container">Did you enter the secret phrase?</p>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState<string>('');
  const [isSecretRevealed, setIsSecretRevealed] = useState<boolean>(false);
  const [selectedImage, setSelectedImage] = useState<string>('');
  const knownSecret = 'opensesame';

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const getRandomImageIndex = () => Math.floor(Math.random() * images.length);

  const selectNewImage = () => {
    setSelectedImage(images[getRandomImageIndex()]);
  };

  const checkSecret = () => {
    const formattedTime = getCurrentTimeString();
    saveData(`attemptedPassword${formattedTime}`, input);
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
  };

  useEffect(() => {
    selectNewImage();
  }, [selectNewImage]);

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      console.log('Data saved successfully:', await response.text());
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    return new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false,
    }).replace(/[^0-9-]/g, '-');
  };

  return (
    <div className="container">
      {/* ... */}
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {/* ... */}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame';

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const selectNewImage = () => {
    setSelectedImage(images[Math.floor(Math.random() * images.length)]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      if (!response.ok) throw new Error('Network response was not ok');
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:\d+\.\d+Z$/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect, useCallback } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const knownSecret = 'opensesame'; // Replace with your actual known secret

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = useCallback(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const checkSecret = useCallback(() => {
    const formattedTime = getCurrentTimeString();
    saveData(`attemptedPassword${formattedTime}`, input);
    setIsSecretRevealed(input === knownSecret);
    if (input === knownSecret) {
      selectNewImage();
    }
  }, [input, selectNewImage]);

  useEffect(() => {
    selectNewImage();
  }, [selectNewImage]);

  const saveData = useCallback((key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text();
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  }, []);

  const getCurrentTimeString = useCallback(() => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:/g, '-').split('.')[0];
  }, []);

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      revealSecret();
    } else {
      setIsSecretRevealed(false);
    }
  };

  const revealSecret = () => {
    setIsSecretRevealed(true);
    selectNewImage();
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
    }).then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:/g, '-').split('.')[0];
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onKeyUp={(e) => e.key === 'Enter' && checkSecret()}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecretHash = '5e884898da28047151d0e56f8dc6292773603f8186ed845d0bd1a9974e93e043'; // Hash of 'opensesame'

  useEffect(selectNewImage, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    const inputHash = hashInput(input);
    const formattedTime = getCurrentTimeString();
    saveData(`attemptedPassword${formattedTime}`, inputHash);
    if (inputHash === knownSecretHash) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
      alert('Incorrect secret. Try again.');
    }
  };

  const saveData = (key: string, data: string) => {
    // ... existing saveData function
  };

  const getCurrentTimeString = () => {
    // ... existing getCurrentTimeString function
  };

  const hashInput = (input: string) => {
    // Simple hashing function (replace with a secure hash function)
    return input.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0).toString();
  };

  return (
    <div className="container">
      {/* ... existing JSX */}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const response = await fetch(`https://nice.runasp.net/Analytics/SaveAnalytics`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ key, data }),
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, ' ').replace(/\..+/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame';

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ key, data }),
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    return new Date().toISOString().replace(/T/, '-').replace(/:/g, '-').split('.')[0];
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  '/IMG_6792.png',
  '/IMG_6793.png',
  // ... other images
];

const useAnalytics = () => {
  const saveData = async (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return await response.text();
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  return { saveData };
};

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const { saveData } = useAnalytics();
  const knownSecret = 'opensesame';

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);

    return () => {
      // Cleanup if needed
    };
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const checkSecret = () => {
    const formattedTime = new Date().toISOString();
    saveData(`attemptedPassword${formattedTime}`, input);
    setIsSecretRevealed(input === knownSecret);
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container" aria-live="polite">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={() => setSelectedImage(images[Math.floor(Math.random() * images.length)])} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container" aria-live="assertive">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useCallback } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');

  const knownSecret = 'opensesame'; // Replace with your actual known secret

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = useCallback(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const checkSecret = useCallback(() => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
  }, [input, knownSecret, selectNewImage]);

  const saveData = useCallback(async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    } catch (error) {
      console.error('Error saving data:', error);
    }
  }, []);

  // Removed getCurrentTimeString function for brevity

  return (
    <div className="container">
      {/* ... */}
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={(event) => event.key === 'Enter' && checkSecret()}
      />
      {/* ... */}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame';

  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      revealSecret();
    } else {
      setIsSecretRevealed(false);
    }
  };

  const revealSecret = () => {
    setIsSecretRevealed(true);
    selectNewImage();
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const saveData = async (key: string, data: string) => {
    try {
      const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      console.log('Data saved successfully:', await response.text());
    } catch (error) {
      console.error('Error saving data:', error);
    }
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:\d+\.\d+Z$/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onKeyUp={(event) => event.key === 'Enter' && checkSecret()}
      />
      {isSecretRevealed ? (
        <div className="image-container">
          <a href={selectedImage} target="_blank" rel="noopener noreferrer">
            <img src={selectedImage} className="logo" alt="Secret Image" />
          </a>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </div>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useCallback } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const knownSecret = 'opensesame'; // Replace with your actual known secret

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = useCallback(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  const checkSecret = useCallback(() => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
  }, [input, selectNewImage]);

  const saveData = useCallback((key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  }, []);

  // Removed getCurrentTimeString function for brevity

  React.useEffect(() => {
    selectNewImage();
  }, [selectNewImage]);

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual known secret

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      revealSecret();
    } else {
      setIsSecretRevealed(false);
    }
  };

  const revealSecret = () => {
    setIsSecretRevealed(true);
    selectNewImage();
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    // Consider handling the response and error more gracefully
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => {
      if (!response.ok) {
        console.error('Network response was not ok');
      }
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return now.toISOString().replace(/T/, '-').replace(/:\d+\.\d+Z$/, '');
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useCallback } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const useSecret = (knownHashedSecret) => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);

  const handleInputChange = useCallback((event) => {
    setInput(event.target.value);
  }, []);

  const checkSecret = useCallback(() => {
    if (hash(input) === knownHashedSecret) {
      setIsSecretRevealed(true);
    } else {
      setIsSecretRevealed(false);
    }
  }, [input, knownHashedSecret]);

  return { input, isSecretRevealed, handleInputChange, checkSecret };
};

const useRandomImage = () => {
  const [selectedImage, setSelectedImage] = useState('');

  const selectNewImage = useCallback(() => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  }, []);

  return { selectedImage, selectNewImage };
};

const hash = (input) => {
  // Simple hashing function (replace with a more secure one)
  return input.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
};

const SecretImageRevealer: React.FC = () => {
  const knownHashedSecret = hash('opensesame'); // Replace with your actual known secret
  const { input, isSecretRevealed, handleInputChange, checkSecret } = useSecret(knownHashedSecret);
  const { selectedImage, selectNewImage } = useRandomImage();

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        name="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
        onKeyUp={checkSecret}
        aria-label="Enter the secret phrase"
      />
      {isSecretRevealed && (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button" aria-label="Change the image">
            Change Image
          </button>
        </>
      )}
      {!isSecretRevealed && (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
// SecretImageRevealer.tsx
import React, { useState, useEffect } from 'react';
import './SecretImageRevealer.css';

const images = [
  '/IMG_6791.png',
  // ... other images
  '/IMG_8062.png',
];

const SecretImageRevealer: React.FC = () => {
  const [input, setInput] = useState('');
  const [isSecretRevealed, setIsSecretRevealed] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');
  const knownSecret = 'opensesame'; // Replace with your actual secret

  useEffect(() => {
    selectNewImage();
  }, []);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInput(event.target.value);
  };

  const selectNewImage = () => {
    const randomIndex = Math.floor(Math.random() * images.length);
    setSelectedImage(images[randomIndex]);
  };

  const checkSecret = () => {
    if (input === knownSecret) {
      setIsSecretRevealed(true);
      selectNewImage();
    } else {
      setIsSecretRevealed(false);
    }
    saveData(`attemptedPassword${getCurrentTimeString()}`, input);
  };

  const saveData = (key: string, data: string) => {
    const endpoint = `https://nice.runasp.net/Analytics/SaveAnalytics?key=${encodeURIComponent(key)}&data=${encodeURIComponent(data)}`;
    fetch(endpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
    }).then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
    }).catch(error => {
      console.error('Error saving data:', error);
    });
  };

  const getCurrentTimeString = () => {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}-${String(now.getHours()).padStart(2, '0')}-${String(now.getMinutes()).padStart(2, '0')}-${String(now.getSeconds()).padStart(2, '0')}`;
  };

  return (
    <div className="container">
      <label htmlFor="sharedSecret" className="secret-label">
        What did Ali Baba say to open the door (no spaces all lower case)?
      </label>
      <input
        id="sharedSecret"
        type="text"
        className="secret-input"
        value={input}
        onChange={handleInputChange}
        onBlur={checkSecret}
      />
      {isSecretRevealed ? (
        <>
          <div className="image-container">
            <a href={selectedImage} target="_blank" rel="noopener noreferrer">
              <img src={selectedImage} className="logo" alt="Secret Image" />
            </a>
          </div>
          <button onClick={selectNewImage} className="change-image-button">
            Change Image
          </button>
        </>
      ) : (
        <div className="image-container">
          <p>Did you enter a password? Please check if it is correct.</p>
        </div>
      )}
    </div>
  );
};

export default SecretImageRevealer;
